plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'jacoco'
	id 'io.qameta.allure' version '2.8.1'
	id 'maven-publish'
	id 'nu.studer.credentials' version '1.0.7'
}

sourceCompatibility = '11'
String accessToken = credentials.azureArtifactsGradleAccessToken

repositories {
	maven {
		url 'https://vsunicred.pkgs.visualstudio.com/_packaging/maven%40Local/maven/v1'
		credentials {
			username "svc.cartoes.dev"
			password project.azureDevOpsArtifactsAccessToken
		}
	}
	mavenCentral()
}

ext {
	set('springCloudVersion', "Greenwich.SR4")
	set('swaggerVersion', '2.9.2')
	set('commonsLangVersion', "3.9")
	set('servletVersion', '4.0.1')
	set('allureVersion', '2.13.0')
	set('junitVersion', '5.3.2')
	set('cucumberVersion', '4.7.4')
	set('mapstructVersion', '1.3.0.Final')
	set('equalsverifierVersion', '3.1.10')
	set('beanmatchersVersion', '0.11')
	set('classgraphVersion', '4.8.53')
	set('mockitoJunitVersion', '2.23.0')
	set('embeddedMongoVersion', '2.1.2')

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.cloud:spring-cloud-starter-config"
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	implementation "org.springframework.cloud:spring-cloud-contract-wiremock"
	implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
	implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
	implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
	implementation "javax.servlet:javax.servlet-api:${servletVersion}"
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "io.github.classgraph:classgraph:${classgraphVersion}"

	runtimeOnly "io.micrometer:micrometer-registry-prometheus"
	runtimeOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'junit', module: 'junit'
	}

	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJunitVersion}"

	testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:${embeddedMongoVersion}"

	testImplementation "io.cucumber:cucumber-core:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"

	testImplementation "io.qameta.allure:allure-junit5:${allureVersion}"
	testImplementation "io.qameta.allure:allure-cucumber4-jvm:${allureVersion}"
	testImplementation "io.qameta.allure:allure-java-commons:${allureVersion}"

	testImplementation "nl.jqno.equalsverifier:equalsverifier:${equalsverifierVersion}"
	testImplementation "com.google.code.bean-matchers:bean-matchers:${beanmatchersVersion}"

	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
	testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitVersion}"

	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jar {
	manifest {
		attributes(
				'Main-Class': 'br.com.unicred.cards.proposal.Application'
		)
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

test {
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}

allure {
	version = "2.13.0"
	downloadLink = "https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/2.13.0/allure-commandline-2.13.0.zip"
	resultsDir = file("${buildDir}/reports/allure/allure-results")
	reportDir = file("${buildDir}/reports/allure/allure-reports")
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/reports/jacoco/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		csv.enabled false
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/jacocoXml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco/jacocoHtml")
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'br/com/unicred/cards/proposal/Application*',
					'br/com/unicred/cards/proposal/application/config/*',
					'br/com/unicred/cards/proposal/infrastructure/mappers*'
			])
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.95
			}
			excludes = [
					'br.com.unicred.cards.proposal.Application',
					'br.com.unicred.cards.proposal.application.config.*',
					'br.com.unicred.cards.proposal.infrastructure.mappers.*'
			]
		}
	}
}

jacocoTestCoverageVerification.mustRunAfter jacocoTestReport

publishing {
	publications {
		impl(MavenPublication) {
			groupId project.group
			artifactId project.name
			version project.version

			from components.java
		}
	}
	repositories {
		maven {
			url 'https://vsunicred.pkgs.visualstudio.com/_packaging/maven/maven/v1'
			credentials {
				username "AZURE_ARTIFACTS"
				password accessToken
			}
		}
	}
}
